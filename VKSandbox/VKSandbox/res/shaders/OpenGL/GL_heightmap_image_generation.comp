#version 430 core
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

//layout(r16f, binding = 0) uniform image2D outputImage;
layout (binding = 0, r16f) uniform image2DArray heightmapArrayImage;

// 2D Random Gradient Function
vec2 randomGradient(vec2 p) {
    p = mod(p, vec2(289.0));
    float x = fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);
    float y = fract(sin(dot(p, vec2(269.5, 183.3))) * 43758.5453);
    return normalize(vec2(x, y) * 2.0 - 1.0);
}

// Smooth Interpolation
float smoothStepInterp(float a, float b, float t) {
    return mix(a, b, t * t * (3.0 - 2.0 * t));
}

// Perlin Noise Function
float perlinNoise(vec2 uv) {
    vec2 p = floor(uv);
    vec2 f = fract(uv);

    vec2 g00 = randomGradient(p);
    vec2 g10 = randomGradient(p + vec2(1.0, 0.0));
    vec2 g01 = randomGradient(p + vec2(0.0, 1.0));
    vec2 g11 = randomGradient(p + vec2(1.0, 1.0));

    float d00 = dot(g00, f);
    float d10 = dot(g10, f - vec2(1.0, 0.0));
    float d01 = dot(g01, f - vec2(0.0, 1.0));
    float d11 = dot(g11, f - vec2(1.0, 1.0));

    float tx = smoothStepInterp(d00, d10, f.x);
    float ty = smoothStepInterp(d01, d11, f.x);
    
    return smoothStepInterp(tx, ty, f.y);
}

// Fractal Brownian Motion (FBM) - Multiple Octaves of Noise
float fbm(vec2 uv) {
    float value = 0.0;
    float amplitude = 0.5;
    float frequency = 1.0;

    // Move octaves, mean more detail
    for (int i = 0; i < 100; i++) { 
        value += amplitude * perlinNoise(uv * frequency);
        frequency *= 2.0;
        amplitude *= 0.5;
    }
    return value;
}

void main() {
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);   
    ivec2 outputImageSize = imageSize(heightmapArrayImage).xy;
    vec2 uv_screenspace = vec2(pixelCoords) / vec2(outputImageSize);

    int layerIndex = 0;

    vec4 outputColor = vec4(1,0,0,1);

    vec2 uv = uv_screenspace * 2.0; // Scale up noise

    // Offset the output in uv space
    uv += vec2(2.0, 0);
    float height = fbm(uv);

    // Don't allow negative values, physx doesn't support them
    height = clamp(height, 0.0, 1.0);

    outputColor = vec4(height, 0.0, 0.0, 0.0); // Grayscale output

    imageStore(heightmapArrayImage, ivec3(pixelCoords, layerIndex), outputColor);
}