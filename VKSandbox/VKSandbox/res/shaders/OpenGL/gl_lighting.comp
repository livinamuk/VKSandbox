#version 430 core
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "../common/lighting.glsl"
#include "../common/post_processing.glsl"
#include "../common/types.glsl"
#include "../common/util.glsl"

layout(binding = 0) uniform sampler2D BaseColorTexture;
layout(binding = 1) uniform sampler2D NormalTexture;
layout(binding = 2) uniform sampler2D RMATexture;
layout(binding = 3) uniform sampler2D DepthTexture;
layout(binding = 4) uniform sampler2D WorldPositionTexture;
layout(binding = 5) uniform usampler2D ViewportIndexTexture;
layout(binding = 6) uniform sampler2D EmissiveTexture;

layout(rgba16f, binding = 0) uniform image2D outputImage;

readonly restrict layout(std430, binding = 1) buffer rendererDataBuffer {
	RendererData rendererData;
};

readonly restrict layout(std430, binding = 2) buffer viewportDataBuffer {
	ViewportData viewportData[];
};

readonly restrict layout(std430, binding = 4) buffer lightsBuffer {
	Light lights[];
};

void main() {
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);   
    ivec2 outputImageSize = imageSize(outputImage);
    vec2 uv_screenspace = vec2(pixelCoords) / vec2(outputImageSize);

    // Don't process out of bounds pixels
    if (pixelCoords.x >= outputImageSize.x || pixelCoords.y >= outputImageSize.y) {
        return;
    }    
    
    vec4 WOLRD_POS_FROM_TEXTURE = texture(WorldPositionTexture, uv_screenspace);

    // Inputs
    vec4 baseColor = texture(BaseColorTexture, uv_screenspace);
    vec4 normal = texture(NormalTexture, uv_screenspace);
    vec4 rma = texture(RMATexture, uv_screenspace);
    uint viewportIndex = texture(ViewportIndexTexture, uv_screenspace).r;

    // Gamma-correct the base color
    vec3 gammaBaseColor = pow(baseColor.rgb, vec3(2.2));

    float roughness = rma.r;
    float metallic = rma.g;
    
    vec2 renderTargetSize = vec2(rendererData.gBufferWidth, rendererData.gBufferHeight);
    int splitScreenMode = rendererData.splitscreenMode;

    float clipSpaceXMin = viewportData[viewportIndex].clipSpaceXMin;
    float clipSpaceXMax = viewportData[viewportIndex].clipSpaceXMax;
    float clipSpaceYMin = viewportData[viewportIndex].clipSpaceYMin;
    float clipSpaceYMax = viewportData[viewportIndex].clipSpaceYMax;
    mat4 inverseProjection = viewportData[viewportIndex].inverseProjection;
    mat4 inverseView = viewportData[viewportIndex].inverseView;
    vec3 viewPos = inverseView[3].xyz;

    // Position from depth reconstruction
    float z = texture(DepthTexture, uv_screenspace).r;
    vec2 clipSpaceTexCoord = uv_screenspace;
	clipSpaceTexCoord.x = (clipSpaceTexCoord.x - clipSpaceXMin) / (clipSpaceXMax - clipSpaceXMin);
	clipSpaceTexCoord.y = (clipSpaceTexCoord.y - clipSpaceYMin) / (clipSpaceYMax - clipSpaceYMin);
	vec4 clipSpacePosition = vec4(clipSpaceTexCoord * 2.0 - 1.0, z, 1.0);
    vec4 viewSpacePosition = inverseProjection * clipSpacePosition;
    viewSpacePosition /= viewSpacePosition.w;
    vec4 worldSpacePosition = inverseView * viewSpacePosition;

    //worldSpacePosition.rgb = WOLRD_POS_FROM_TEXTURE.rgb;




    // Direct light
    vec3 directLighting = vec3(0); 
    for (int i = 0; i < 2; i++) {    
        Light light = lights[i];
        vec3 lightPosition = vec3(light.posX, light.posY, light.posZ);
        vec3 lightColor =  vec3(light.colorR, light.colorG, light.colorB);
        float lightStrength = light.strength;
        float lightRadius = light.radius;
        directLighting += GetDirectLighting(lightPosition, lightColor, lightRadius, lightStrength, normal.xyz, worldSpacePosition.xyz, gammaBaseColor.rgb, roughness, metallic, viewPos);
    }
        
    		  
    // Ambient light
    vec3 amibentLightColor = vec3(1, 0.98, 0.94);
   float ambientIntensity = 0.005;
   vec3 ambientColor = baseColor.rgb * amibentLightColor;
   vec3 ambientLighting = ambientColor * ambientIntensity;


    // Alpha
    float finalAlpha = baseColor.a;
    
    // Composite
    vec3 finalColor = directLighting.rgb;// + ambientLighting;

    // Tone mapping
	finalColor = mix(finalColor, Tonemap_ACES(finalColor), 1.0);    
	finalColor = pow(finalColor, vec3(1.0/2.2));
	finalColor = mix(finalColor, Tonemap_ACES(finalColor), 0.1235);  
    
    finalColor.rgb = finalColor.rgb * finalAlpha;    
    vec4 outputColor = vec4(finalColor, finalAlpha);
    
    // Don't apply lighting to skybox
    float skyboxFlag = float(normal.x == 0.0 && normal.y == 0.0 && normal.z == 0.0);
    outputColor.rgb = mix(outputColor.rgb, baseColor.rgb, skyboxFlag);
    
    // Post process vibrance
    outputColor = Vibrance(outputColor, 1.5);

    if (false) {
        if (viewportIndex == 0) {
            outputColor.rgb = vec3(1.0) - outputColor.rgb;
        }
        if (viewportIndex == 1) {
            outputColor.rgb *= vec3(1, 0, 0);
        }
        if (viewportIndex == 2) {
            outputColor.rgb *= vec3(0, 1, 0);
        }
        if (viewportIndex == 3) {
            outputColor.rgb *= vec3(0, 0, 1);
        }
    }

    //vec3 N = normal.xyz;
    //vec3 L = normalize(lightPosition - worldSpacePosition.xyz);
    //float NoL = clamp(dot(N, L), 0.0, 1.0);
    //outputColor.rgb = vec3(NoL);
    //outputColor.rgb = normal.rgb;


    vec4 emssiveColor = texture(EmissiveTexture, uv_screenspace);
    outputColor += emssiveColor;


    imageStore(outputImage, pixelCoords, outputColor);
}