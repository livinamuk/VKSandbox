#version 430 core
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "../common/lighting.glsl"
#include "../common/post_processing.glsl"
#include "../common/types.glsl"
#include "../common/util.glsl"

layout(binding = 0) uniform sampler2D BaseColorTexture;
layout(binding = 1) uniform sampler2D NormalTexture;
layout(binding = 2) uniform sampler2D RMATexture;
layout(binding = 3) uniform sampler2D DepthTexture;
layout(binding = 4) uniform sampler2D WorldPositionTexture;
layout(binding = 5) uniform usampler2D ViewportIndexTexture;
layout(binding = 6) uniform sampler2D EmissiveTexture;
layout(binding = 7) uniform sampler2D FlashlightCookieTexture;
layout(binding = 8) uniform sampler2D FlashlighShadowMapTexture;

uniform int u_editorLighting;

layout(rgba16f, binding = 0) uniform image2D outputImage;

readonly restrict layout(std430, binding = 1) buffer rendererDataBuffer {
	RendererData rendererData;
};

readonly restrict layout(std430, binding = 2) buffer viewportDataBuffer {
	ViewportData viewportData[];
};

readonly restrict layout(std430, binding = 4) buffer lightsBuffer {
	Light lights[];
};

void main() {
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);   
    ivec2 outputImageSize = imageSize(outputImage);


   // vec2 uv_screenspace = vec2(pixelCoords) / vec2(outputImageSize);
     vec2 uv_screenspace = (vec2(pixelCoords) + 0.5) / vec2(outputImageSize);
    // Don't process out of bounds pixels
    if (pixelCoords.x >= outputImageSize.x || pixelCoords.y >= outputImageSize.y) {
        return;
    }    
    
    // Inputs
    vec4 baseColor = texture(BaseColorTexture, uv_screenspace);
    vec4 normal = texture(NormalTexture, uv_screenspace);
    vec4 rma = texture(RMATexture, uv_screenspace);
    uint viewportIndex = texture(ViewportIndexTexture, uv_screenspace).r;
    float sssRadius = texture(EmissiveTexture, uv_screenspace).a;

    // Gamma-correct the base color
    vec3 gammaBaseColor = pow(baseColor.rgb, vec3(2.2));

    float roughness = rma.r;
    float metallic = rma.g;
    
    vec2 renderTargetSize = vec2(rendererData.gBufferWidth, rendererData.gBufferHeight);
    int splitScreenMode = rendererData.splitscreenMode;

    //float clipSpaceXMin = viewportData[viewportIndex].clipSpaceXMin;
    //float clipSpaceXMax = viewportData[viewportIndex].clipSpaceXMax;
    //float clipSpaceYMin = viewportData[viewportIndex].clipSpaceYMin;
    //float clipSpaceYMax = viewportData[viewportIndex].clipSpaceYMax;
    mat4 inverseProjection = viewportData[viewportIndex].inverseProjection;
    mat4 inverseView = viewportData[viewportIndex].inverseView;
    mat4 viewMatrix = viewportData[viewportIndex].view;
    vec3 viewPos = inverseView[3].xyz;    
    mat4 flashlightProjectionView = viewportData[viewportIndex].flashlightProjectionView;
    vec4 flashlightDir = viewportData[viewportIndex].flashlightDir;
    vec4 flashlightPosition = viewportData[viewportIndex].flashlightPosition;
    float flashlightModifer = viewportData[viewportIndex].flashlightModifer;

    // Position from depth reconstruction
    //float z = texture(DepthTexture, uv_screenspace).r;
    //vec2 clipSpaceTexCoord = uv_screenspace;
	//clipSpaceTexCoord.x = (clipSpaceTexCoord.x - clipSpaceXMin) / (clipSpaceXMax - clipSpaceXMin);
	//clipSpaceTexCoord.y = (clipSpaceTexCoord.y - clipSpaceYMin) / (clipSpaceYMax - clipSpaceYMin);
	//vec4 clipSpacePosition = vec4(clipSpaceTexCoord * 2.0 - 1.0, z, 1.0);
    //vec4 viewSpacePosition = inverseProjection * clipSpacePosition;
    //viewSpacePosition /= viewSpacePosition.w;
    //vec4 worldSpacePosition = inverseView * viewSpacePosition;

    vec3 worldSpacePosition = texture(WorldPositionTexture, uv_screenspace).rgb;




    // Direct light
    vec3 directLighting = vec3(0); 
    for (int i = 0; i < 3; i++) {    
        Light light = lights[i];
        vec3 lightPosition = vec3(light.posX, light.posY, light.posZ);
        vec3 lightColor =  vec3(light.colorR, light.colorG, light.colorB);
        float lightStrength = light.strength;
        float lightRadius = light.radius;
       
        directLighting += GetDirectLighting(lightPosition, lightColor, lightRadius, lightStrength, normal.xyz, worldSpacePosition.xyz, gammaBaseColor.rgb, roughness, metallic, viewPos);
     
        // Subsurface scattering
        vec3 radius = vec3(sssRadius);
        vec3 subColor = Saturate(baseColor.rgb, 1.5);
        vec3 L = normalize(lightPosition - worldSpacePosition.xyz);
        float NdotL = max(dot(normal.xyz, L), 0.0);
        vec3 sss = 0.2 * exp(-3.0 * abs(NdotL) / (radius + 0.001)); 
        vec3 sssColor = subColor * radius * sss;
        float lightAttenuation = smoothstep(lightRadius, 0, length(lightPosition - worldSpacePosition.xyz));
        directLighting += sssColor * lightAttenuation;
    }

    if (flashlightModifer > 0.1) { 
        // Player flashlight
		vec3 forward = -normalize(vec3(inverseView[2].xyz));				
		vec3 spotLightPos = flashlightPosition.xyz;
		spotLightPos -= vec3(0, 0.0, 0);
		vec3 spotLightDir = normalize(spotLightPos - (viewPos - forward));
        spotLightDir = flashlightDir.xyz;
        vec3 spotLightColor = vec3(0.9, 0.95, 1.1);
        float fresnelReflect = 0.9;
        float spotLightRadius = 50.0;
        float spotLightStregth = 3.0;        
        float innerAngle = cos(radians(0.0 * flashlightModifer));
        float outerAngle = cos(radians(30.0));        
        mat4 lightProjectionView = flashlightProjectionView;
        vec3 cookie = ApplyCookie(lightProjectionView, worldSpacePosition.xyz, spotLightPos, spotLightColor, 10, FlashlightCookieTexture);
        vec3 spotLighting = GetSpotlightLighting(spotLightPos, spotLightDir, spotLightColor, spotLightRadius, spotLightStregth, innerAngle, outerAngle, normal.xyz, worldSpacePosition.xyz, gammaBaseColor.rgb, roughness, metallic, viewPos, lightProjectionView);
        vec4 FragPosLightSpace = lightProjectionView * vec4(worldSpacePosition.xyz, 1.0);
        float shadow = SpotlightShadowCalculation(FragPosLightSpace, normal.xyz, spotLightDir, worldSpacePosition.xyz, spotLightPos, viewPos, FlashlighShadowMapTexture);  
        spotLighting *= vec3(1 - shadow);
        spotLighting *= cookie * cookie * 5 * spotLightColor;
        directLighting += vec3(spotLighting) * flashlightModifer;
    }

    // Ambient light
    vec3 amibentLightColor = vec3(1, 0.98, 0.94);
    float ambientIntensity = 0.0025;
    vec3 ambientColor = baseColor.rgb * amibentLightColor;
    vec3 ambientLighting = ambientColor * ambientIntensity;

    // Alpha
    float finalAlpha = baseColor.a;
    
    // Composite
    vec3 finalColor = directLighting.rgb + ambientLighting;
    
    // Emissive
    vec3 emssiveColor = texture(EmissiveTexture, uv_screenspace).rgb;
    //finalColor += emssiveColor;

    // Tone mapping
    finalColor = mix(finalColor, Tonemap_ACES(finalColor), 1.0);   
    
    // Gamma correct
    finalColor = pow(finalColor, vec3(1.0/2.2));

	finalColor = mix(finalColor, Tonemap_ACES(finalColor), 0.35);  
    
    finalColor.rgb = finalColor.rgb * finalAlpha;    
    vec4 outputColor = vec4(finalColor, finalAlpha);
    
    // Don't apply lighting to skybox
    float skyboxFlag = float(normal.x == 0.0 && normal.y == 0.0 && normal.z == 0.0);
    outputColor.rgba = mix(outputColor.rgba, baseColor.rgba, skyboxFlag);
    
    if (false) {
        if (viewportIndex == 0) {
            outputColor.rgb = vec3(1.0) - outputColor.rgb;
        }
        if (viewportIndex == 1) {
            outputColor.rgb *= vec3(1, 0, 0);
        }
        if (viewportIndex == 2) {
            outputColor.rgb *= vec3(0, 1, 0);
        }
        if (viewportIndex == 3) {
            outputColor.rgb *= vec3(0, 0, 1);
        }
    }
    
	// Noise
	vec2 filmRes = vec2(rendererData.gBufferWidth, rendererData.gBufferHeight);
    vec2 uv = uv_screenspace;
    float time = rendererData.time;
	vec2 coord = pixelCoords;
	vec2 rest = modf(uv * filmRes, coord);
	vec3 noise00 = FilmPixel(coord / filmRes, time);
	vec3 noise01 = FilmPixel((coord + vec2(0, 1)) / filmRes, time);
	vec3 noise10 = FilmPixel((coord + vec2(1, 0)) / filmRes, time);
	vec3 noise11 = FilmPixel((coord + vec2(1, 1)) / filmRes, time);
	vec3 noise = mix(mix(noise00, noise01, rest.y), mix(noise10, noise11, rest.y), rest.x) * vec3(0.7, 0.6, 0.8);
	float noiseSpeed = 15.0;
	float x = Rand(uv + Rand(vec2(int(time * noiseSpeed), int(-time * noiseSpeed))));
	float noiseFactor = 0.035;
	outputColor = outputColor + (x * -noiseFactor) + (noiseFactor / 2);


    // Editor lighting
    if (u_editorLighting == 1) {
        vec3 lightDir = normalize(inverseView[2].xyz);
        float ndotl = max(dot(normal.xyz, lightDir), 0.0);
        vec3 lightColor = vec3(0.5, 0.5, 0.6) * ndotl;
        outputColor = vec4(lightColor, 1);
    }

    // Output
    imageStore(outputImage, pixelCoords, outputColor);

        
    // vec2 viewportPos = vec2(viewportData[viewportIndex].posX, viewportData[viewportIndex].posY);
    // vec2 viewportSize = vec2(viewportData[viewportIndex].sizeX, viewportData[viewportIndex].sizeY);
    // vec2 screenUV = WorldToScreen(worldSpacePosition.rgb, viewportData[viewportIndex].projectionView, viewportPos, viewportSize);
    // imageStore(outputImage, pixelCoords, vec4(screenUV, 0, 1));
    // imageStore(outputImage, pixelCoords, vec4(normal.rgb, 1.0));    
    // imageStore(outputImage, pixelCoords, vec4(baseColor.rgb, 1.0));
    // imageStore(outputImage, pixelCoords, vec4(rma.rgb, 1.0));
    // imageStore(outputImage, pixelCoords, vec4(worldSpacePosition.rgb, 1.0)); 
    // imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(screenUV, 0.0, 1.0));
    // vec3 sceneWorldPos = texture(WorldPositionTexture, screenUV).rgb;
    // imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(sceneWorldPos, 1.0));
    // imageStore(outputImage, pixelCoords, vec4(worldSpacePosition.rgb * 0.1, 1.0));
    // imageStore(outputImage, pixelCoords, vec4(color.rgb, 1.0));     
}