#version 460 core
#include "../common/types.glsl"

layout (local_size_x = 16, local_size_y = 4, local_size_z = 1) in;
layout(rgba16f, binding = 0) uniform image2D outputImage;
layout (binding = 1) uniform sampler2D blurBuffer0ColorB;
layout (binding = 2) uniform sampler2D blurBuffer1ColorB;
layout (binding = 3) uniform sampler2D blurBuffer2ColorB;
layout (binding = 4) uniform sampler2D blurBuffer3ColorB;

uniform int u_viewportIndex;

readonly restrict layout(std430, binding = 2) buffer viewportDataBuffer {
	ViewportData viewportData[];
};

void main() {
    ivec2 offset = ivec2(viewportData[u_viewportIndex].xOffset, viewportData[u_viewportIndex].yOffset);
    vec2 viewportSize = vec2(viewportData[u_viewportIndex].width, viewportData[u_viewportIndex].height); 

    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy) + offset;   
    vec2 uv_screenspace = vec2(gl_GlobalInvocationID.xy) / viewportSize;

    vec4 finalColor = vec4(0,0,0,0);
    finalColor.rgb += texture(blurBuffer0ColorB, uv_screenspace).rgb;
    finalColor.rgb += texture(blurBuffer1ColorB, uv_screenspace).rgb;
    finalColor.rgb += texture(blurBuffer2ColorB, uv_screenspace).rgb;
    finalColor.rgb += texture(blurBuffer3ColorB, uv_screenspace).rgb;
    finalColor.rgb *= 0.6;
    finalColor += imageLoad(outputImage, pixelCoords);
  
    imageStore(outputImage, pixelCoords, finalColor);
}

