#version 460 core
#include "../common/util.glsl"
#include "../common/types.glsl"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D HeightMapTexture;
layout(binding = 1) uniform sampler2D WorldPositionTexture;

uniform int gridSize;
uniform vec3 offset;
uniform float u_heightMapWorldSpaceSize;
uniform float spacing;

struct Vertex {
    float position[3];
    float normal[3];
};

layout(std430, binding = 6) buffer IndirectDraw {
    uint count;
    uint instanceCount;
    uint firstVertex;
    int baseInstance;
} drawCmd;

readonly layout(std430, binding = 2) buffer viewportDataBuffer {
	ViewportData viewportData[];
};

layout(std430, binding = 10) buffer inputVertexBuffer {
    Vertex InputVertexBuffer[];
};

layout(std430, binding = 11) buffer inputIndexBuffer {
    uint InputIndexBuffer[];
};

layout(std430, binding = 9) buffer BladePositions {
    vec4 bladePositions[];
};

float SignedDistance(vec3 point, vec4 plane) {
    return dot(plane.xyz, point) + plane.w;
}

bool IntersectsPoint(vec3 point, int viewportIndex) {
    vec4 frustumPlanes[6];
    frustumPlanes[0] = viewportData[viewportIndex].frustumPlane0;
    frustumPlanes[1] = viewportData[viewportIndex].frustumPlane1;
    frustumPlanes[2] = viewportData[viewportIndex].frustumPlane2;
    frustumPlanes[3] = viewportData[viewportIndex].frustumPlane3;
    frustumPlanes[4] = viewportData[viewportIndex].frustumPlane4;
    frustumPlanes[5] = viewportData[viewportIndex].frustumPlane5;

    for (int i = 0; i < 6; i++) {
        float distance = SignedDistance(point, frustumPlanes[i]);
        if (distance < 0) { // Fully outside
            return false;
        }
    }
    return true;
}

bool IntersectsSphere(vec3 center, float radius, int viewportIndex) {
    vec4 frustumPlanes[6];
    frustumPlanes[0] = viewportData[viewportIndex].frustumPlane0;
    frustumPlanes[1] = viewportData[viewportIndex].frustumPlane1;
    frustumPlanes[2] = viewportData[viewportIndex].frustumPlane2;
    frustumPlanes[3] = viewportData[viewportIndex].frustumPlane3;
    frustumPlanes[4] = viewportData[viewportIndex].frustumPlane4;
    frustumPlanes[5] = viewportData[viewportIndex].frustumPlane5;
    
    for (int i = 0; i < 6; i++) {
        float distance = SignedDistance(center, frustumPlanes[i]);
        if (distance < -radius) { // Fully outside
            return false;
        }
    }
    return true;
}

uint RandomUInt(vec2 seedVec, uint max) {
    // Hash the vec2 into a uint
    uint seed = floatBitsToUint(seedVec.x) ^ floatBitsToUint(seedVec.y);
    seed ^= 2747636419u;
    seed *= 2654435761u;
    seed ^= seed >> 16;
    seed *= 2654435761u;
    seed ^= seed >> 16;

    // Map the result to range [0, max]
    return seed % (max + 1u);
}




void main() {
    
    // tweakables
    float bendStrength = 0.1;
    float bladeHeight = 0.075;
    float bottomWidth = 0.005;
    float topWidth = 0.002;

    int viewportIndex = 0;
    vec2 viewportPos = vec2(viewportData[viewportIndex].posX, viewportData[viewportIndex].posY);
    vec2 viewportSize = vec2(viewportData[viewportIndex].sizeX, viewportData[viewportIndex].sizeY);
    mat4 inverseView = viewportData[viewportIndex].inverseView;
    vec3 viewPos = inverseView[3].xyz;   
    mat4 projectionView =  viewportData[viewportIndex].projectionView;

    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    //int index = gid.y * gridSize + gid.x;

    // World position
    //float posX = float(gid.x) * spacing + floor(offset.x / spacing) * spacing;       
    //float posZ = float(gid.y) * spacing + floor(offset.z / spacing) * spacing;
    
    float posX = float(gl_GlobalInvocationID.x) * spacing + offset.x;       
    float posZ = float(gl_GlobalInvocationID.y) * spacing + offset.z;

    float heightMapYHeight = -5;
    float heightMapYScale = 5;
    vec2 normalizedCoords = vec2(posX / u_heightMapWorldSpaceSize, posZ / u_heightMapWorldSpaceSize);
    vec2 texelSize = 1.0 / textureSize(HeightMapTexture, 0);
    normalizedCoords += texelSize * 0.5;
    float height = texture(HeightMapTexture, normalizedCoords).r;
    float posY = heightMapYHeight + (height * heightMapYScale);
    
    float rr = Rand(vec2(gid.y, gid.x));
    float amt = 0.05;
    posY += rr * amt - (amt / 2);
    vec3 basePos = vec3(posX, posY, posZ); 

    // Frustum cull
    if (!IntersectsSphere(basePos, bladeHeight * 10, viewportIndex)) {
        return;        
    }
        
    // Cull to screen bounds        
    vec2 screenUV = WorldToScreen(basePos, projectionView, viewportPos, viewportSize);
    screenUV = clamp(screenUV, vec2(0.0), vec2(1.0));

    // Occlusion cull
    vec3 sceneWorldPos = texture(WorldPositionTexture, screenUV).rgb;
    float sceneDistanceToCamera = length(sceneWorldPos - viewPos);
    float baseDistanceToCamera = length(basePos - viewPos);        
    float boundingRadius = bladeHeight;
    if ((baseDistanceToCamera - boundingRadius) > sceneDistanceToCamera) {
        return;
    }
        
    // Don't sample skybox
    //if (sceneWorldPos.x == 0.0 && sceneWorldPos.y == 0.0 && sceneWorldPos.z == 0.0) {
    //    return;
    //}

    // Jitter the positon
    //float jitterX = (Rand(vec2(basePos.x, basePos.z)) - 0.5) * 0.1;
    //float jitterZ = (Rand(vec2(basePos.z, basePos.x)) - 0.5) * 0.1;
    //basePos.x += jitterX;
    //basePos.z += jitterZ;

    // Increment the draw command
    uint baseIndex = atomicAdd(drawCmd.count, 24);
    //baseIndex = gid.y * gridSize + gid.x;
    // Store the positions
    uint indx = baseIndex / 24; // there are 24 indices per blade
    bladePositions[indx] = vec4(basePos, 0);
}
