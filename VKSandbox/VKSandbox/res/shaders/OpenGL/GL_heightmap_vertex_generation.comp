#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout (rgba8, binding = 0) uniform readonly image2D heightmap;

struct Vertex {
    float position[3];
    float normal[3];
    float uv[2];
    float tangent[3];
};

layout (binding = 5, std430) buffer VertexBuffer {
    Vertex vertices[];
};

layout (binding = 6, std430) buffer IndexBuffer {
    uint indices[];
};

void main() {
    ivec2 imageSize = imageSize(heightmap);
    int width = imageSize.x;
    int depth = imageSize.y;

    uint x = gl_GlobalInvocationID.x;
    uint z = gl_GlobalInvocationID.y;

    if (x >= width || z >= depth) return;

    uint index = z * width + x;

    // Read height from the heightmap
    float height = imageLoad(heightmap, ivec2(x, z)).r;

    // Set vertex attributes
    vertices[index].position[0] = float(x);
    vertices[index].position[1] = height;
    vertices[index].position[2] = float(z);

    vertices[index].uv[0] = float(x) / float(width - 1);
    vertices[index].uv[1] = float(z) / float(depth - 1);

    // --- Normal Calculation ---
// Read neighboring heights
float left  = imageLoad(heightmap, ivec2(max(x - 1, 0), z)).r;
float right = imageLoad(heightmap, ivec2(min(x + 1, width - 1), z)).r;
float down  = imageLoad(heightmap, ivec2(x, max(z - 1, 0))).r;
float up    = imageLoad(heightmap, ivec2(x, min(z + 1, depth - 1))).r;

// Use a finite-difference approximation with a 0.5 factor
vec3 dx = vec3(1.0, 0.5 * (right - left), 0.0);
vec3 dz = vec3(0.0, 0.5 * (up - down), 1.0);

// Compute the normal using the cross product.
// The order here (cross(dz, dx)) is chosen so that for a flat surface (where up==down and right==left)
// the normal comes out as (0,1,0).
vec3 normal = normalize(cross(dz, dx));

    vertices[index].normal[0] = normal.x;
    vertices[index].normal[1] = normal.y;
    vertices[index].normal[2] = normal.z;

    // --- Tangent Calculation ---
    vec3 tangent = normalize(vec3(1.0, right - left, 0.0));

    vertices[index].tangent[0] = tangent.x;
    vertices[index].tangent[1] = tangent.y;
    vertices[index].tangent[2] = tangent.z;

    // Generate indices (strip-like pattern)
    if (x < width - 1 && z < depth - 1) {
        uint i = (z * (width - 1) + x) * 6;
        indices[i] = index;
        indices[i + 1] = index + width;
        indices[i + 2] = index + 1;
        indices[i + 3] = index + 1;
        indices[i + 4] = index + width;
        indices[i + 5] = index + width + 1;
    }
}
