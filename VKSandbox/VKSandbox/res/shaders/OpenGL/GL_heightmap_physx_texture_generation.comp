#version 450

layout (local_size_x = 16, local_size_y = 16) in;

struct Vertex {
    float posX;
    float posY;
    float posZ;
    float nomralX;
    float nomralY;
    float nomralZ;
    float u;
    float v;
    float tangentX;
    float tangentY;
    float tangentZ;
};

layout (std430, binding = 5) buffer VertexBuffer {
    Vertex vertices[];
};

layout (binding = 0, r16f) uniform image2D outHeightImage;

void main() {
    // The full heightmap is 264 x 264 texels (8 chunks * 33 vertices per chunk)
    int fullWidth  = 33 * 8;
    int fullHeight = 33 * 8;

    ivec2 gid = ivec2(gl_GlobalInvocationID.xy);
    if (gid.x >= fullWidth || gid.y >= fullHeight)
        return;

    // Convert global id to local chunk coordinates.
    int localX = gid.x % 33;
    int localY = gid.y % 33;
    int localIndex = localY * 33 + localX;  // local index within the chunk (0 to 1088)

    // Determine which chunk we're in.
    int chunkX = gid.x / 33;
    int chunkY = gid.y / 33;
    int chunkIndex = chunkY * 8 + chunkX;
    int baseVertex = chunkIndex * (33 * 33);  // 1089 vertices per chunk

    int vIdx = baseVertex + localIndex;  // Global vertex index in the buffer

    ivec2 outCoord = gid;
    float heightVal = vertices[vIdx].posY;

    imageStore(outHeightImage, outCoord, vec4(heightVal, 0.0, 0.0, 1.0));
}
